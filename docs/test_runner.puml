@startuml


class Test {
    + Test(std::string, std::function<void()>)
    + run() : TestResult
}

interface ITestResult {
    + hasFailed() : bool
    + getDescription() : std::string
}

class TestResult {
    + TestResult(bool, std::string)
}

interface ITestingPrinter {
    + printTestSetHeader(TestSet);
    + printTestResult(ITestResult);
    + printSummary(ITestsSummary);
    
}

class TestingPrinter {

}

class TestRunner {
    + runTests()
    + registerTestSet(TestSet)
}


interface ITestsSummary {

}

class TestsSummary {

}

abstract class TestSet {
    + virtual beforeEach()
    + virtual init()
    + virtual afterEach()
    + virtual getName() : std::string

    + getTests() : std::vector<Test>
    - addTest(std::string, std::function<void()>)
    - debugTest(std::string, std::function<void()>)  
}

class Assertions {
    ...
}

ITestResult <|-- TestResult
ITestingPrinter <|-- TestingPrinter
ITestsSummary <|-- TestsSummary
Assertions <|-- TestSet

ITestResult <.. ITestingPrinter
ITestsSummary <.. ITestingPrinter
TestSet <.. ITestingPrinter

TestSet <.. TestRunner
TestsSummary <.. TestRunner
ITestingPrinter <.. TestRunner

TestResult <.. Test

Test <.. TestSet

@enduml